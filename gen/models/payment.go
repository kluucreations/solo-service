// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Payment Payment model
// swagger:model payment
type Payment struct {

	// amount
	// Required: true
	Amount *Amount `json:"amount"`

	// borrower
	// Required: true
	Borrower *Borrower `json:"borrower"`

	// breakdown
	// Required: true
	Breakdown []*PaymentBreakdownItems0 `json:"breakdown"`

	// created at
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// guid
	// Required: true
	GUID *string `json:"guid"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// lender
	// Required: true
	Lender *Lender `json:"lender"`

	// loan id
	// Required: true
	LoanID *int64 `json:"loan_id"`

	// payment at
	// Required: true
	// Format: date-time
	PaymentAt *strfmt.DateTime `json:"payment_at"`

	// status
	// Required: true
	Status *string `json:"status"`

	// updated at
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`
}

// Validate validates this payment
func (m *Payment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBorrower(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBreakdown(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoanID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Payment) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	if m.Amount != nil {
		if err := m.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount")
			}
			return err
		}
	}

	return nil
}

func (m *Payment) validateBorrower(formats strfmt.Registry) error {

	if err := validate.Required("borrower", "body", m.Borrower); err != nil {
		return err
	}

	if m.Borrower != nil {
		if err := m.Borrower.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("borrower")
			}
			return err
		}
	}

	return nil
}

func (m *Payment) validateBreakdown(formats strfmt.Registry) error {

	if err := validate.Required("breakdown", "body", m.Breakdown); err != nil {
		return err
	}

	for i := 0; i < len(m.Breakdown); i++ {
		if swag.IsZero(m.Breakdown[i]) { // not required
			continue
		}

		if m.Breakdown[i] != nil {
			if err := m.Breakdown[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("breakdown" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Payment) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateGUID(formats strfmt.Registry) error {

	if err := validate.Required("guid", "body", m.GUID); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateLender(formats strfmt.Registry) error {

	if err := validate.Required("lender", "body", m.Lender); err != nil {
		return err
	}

	if m.Lender != nil {
		if err := m.Lender.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lender")
			}
			return err
		}
	}

	return nil
}

func (m *Payment) validateLoanID(formats strfmt.Registry) error {

	if err := validate.Required("loan_id", "body", m.LoanID); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validatePaymentAt(formats strfmt.Registry) error {

	if err := validate.Required("payment_at", "body", m.PaymentAt); err != nil {
		return err
	}

	if err := validate.FormatOf("payment_at", "body", "date-time", m.PaymentAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Payment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Payment) UnmarshalBinary(b []byte) error {
	var res Payment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentBreakdownItems0 payment breakdown items0
// swagger:model PaymentBreakdownItems0
type PaymentBreakdownItems0 struct {

	// amount
	// Required: true
	Amount *Amount `json:"amount"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this payment breakdown items0
func (m *PaymentBreakdownItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentBreakdownItems0) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	if m.Amount != nil {
		if err := m.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentBreakdownItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentBreakdownItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentBreakdownItems0) UnmarshalBinary(b []byte) error {
	var res PaymentBreakdownItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
